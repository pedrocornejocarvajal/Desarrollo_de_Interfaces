ENTIDADES:

	clsPersona: 
		- String -> nombre, apellido, telefono, direccion, foto
		- int -> idPersona idDepartamento
		- Date -> fechaNacimiento

	clsDepartamento:
		-String -> idDepartamento, nombreDepartamento

		


DAL:

	clsListadosPersonas:
		- List<clsPersona> ListadoCompletoPersonas()


	clsListadoDepartamentos:
		- List<clsDepartamento> ListadoCompletoDepartamentos()

	clsManejadoraPersona:
		- clsPersona optenerPersonasPorId(String Nombre)
		- int guardarPersona(clsPersona persona)
		- int borrarPersona(clsPersona persona)
		- int actualizarPersona(clsPersona persona)

	clsManejadoraDepartamento:
		- clsPersona optenerDepartamentoPorNombre(String Nombre)
		- int guardarDepartamento(clsDepartamento)
		- int borrarDepartamento(clsDepartamento departamento)
		- int actualizarDepartamento(clsDepartamento departamento)

	clsMyConection:
		- String server, dataBase, user, pass

BL:
	¿mismo que la DAL pero con restricciones?

	
		
	
UI_Maui:

	Vistas:
		- ListadoPersonasPage: Vista donde mostraremos la lista de personas con las opcines disponibles

		- EditarAñadirPersonaPage: Vista que se abrira cuando pulsemos el boton añadir persona

		- ListadoDepartamentosPage: Vista donde mostraremos la litsa de departamentos con las opciones disponibles

		- EditarAñadirDepartamentoPage: Vista que se abrira cunado pulsemos el boton añadir departamento
		
	
	ViewModels:
		- vmListadoPersonas: 
			+ public List<clsPersona>
			+ commanDelegate añadirPersona
			+ commanDelegate eliminarPersona
			+ commanDelegate editarPersona

		- vmEditarAñadirPersona: Vista que se abrira cuando pulsemos el boton añadir persona
			+public clsPersona personaSeleccionada
			+ commanDelegate cancelarPersona
			+ commanDelegate guardarPersona

		- vmListadoDepartamentos:
			+ public List<clsDepartamento>
			+ commanDelegate añadirDepartamento
			+ commanDelegate eliminarDepartamento
			+ commanDelegate editarDepartamento

		- vmEditarAñadirDepartamento: 
			+ public clsDepartamento departamentoSeleccionado
			+ commanDelegate cancelarDepartamento
			+ commanDelegate guardarDepartamento


UI_ASP:

	- HomeControllers:
		index() -> te dara las opciones de entrar en personas o en departamentos

	- personaController()
			Return View(ListaPersonasVM)

		+ añadir -> añade una persona nueva
			Return view(List<clsDepartamentos>)
		  [httpost]
		  añadir(clsPersona persona)
			Return view(index)


		+ editar -> edita una persona ya creada
			Return view()
		  [httpost]
		  editar(clsPersona) 
			Return view(index)


		+ borrar -> borra una persona de la base de datos
			Return view()
		  [httpost]
		  borrar(clsPersona)
			Return View(index)


	- departamentosController()
			Return View(List<clsDepartamento>)

		+ añadir -> añade un departamento nuevo
			Return view()
		  [httpost]
		  añadir(clsDepartamento departamento)
			Return view(index)


		+ editar -> edita un departamento ya creado en la base de datos
			Return view()
		  [httpost]
		  editar(clsDepartamento departamentoSeleccionado) 
			Return view(index)


		+ borrar -> borra un departamento de la base de datos
			Return view()
		  [httpost]
		  borrar(clsDepartamento departamentoSeleccionado)
			Return View(index)


	Models:

	
		ViewModels:


			- ListadoPersonasVM: 
					+ List<clsPersonaNombreDepartamento>ListaPersonas		
	
			- editarPersonaVM: hereda de clspersona y añadimos propiedad
					+ propiedad: list<clsDepartamento>

			- clsDetallesPersonaVM: Hereda clsPersona
					+ String nomDepartamento
		
			 
		